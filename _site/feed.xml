<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daisydan</title>
    <description>前端开发工程师一枚！</description>
    <link>https://dandanzhou.github.io/</link>
    <atom:link href="https://dandanzhou.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 05 Mar 2017 18:23:00 +0800</pubDate>
    <lastBuildDate>Sun, 05 Mar 2017 18:23:00 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>JS常用排序算法总结</title>
        <description>&lt;p&gt;1、插入排序&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;思想：构建有序数列，对于未排序的数据，在已排序的数据中从后向前找到合适的位置插入直到未排序的数据个数为0（时间复杂度为n^2）；（注意：在已排序的中找到合适的位置可以采用二分查找提高效率，这样最后的时间复杂度为nlogn）。

代码：
    function insertSort(array){
        var i,j,temp,low,mid,high,result,len = array.length;
        if(len &amp;lt;= 1) return array;
        result = array.slice(0);
        for(i = 1;i &amp;lt; len;i++){
            temp = result[i];
            low = 0;
            high = i - 1;
            while(low &amp;lt;= high){
                mid = parseInt((low+high)/2, 10);
                if(temp &amp;lt; result[mid]) high = mid - 1;
                else low = mid + 1;
            }
            for(j = i - 1;j &amp;gt;= high + 1;j--){
                result[j+1] = result[j];
            }
            result[j+1] = temp;
        }
        return result;
    }
    insertSort([1,3,55,4,77]);  //[1, 3, 4, 55, 77]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2、冒泡排序&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;思想：相邻两元素进行比较，若前一个元素大于后一个元素，则交换顺序，这一轮会找出最大或者最小的元素；然后在剩下的元素重复上述操作直至所有元素都已排序完成。（优化思路：当一次遍历前后数组不产生变化时，说明该数组已经有序，结束排序）

代码：
    function bubbleSort(array){
        var len = array.length,i,j,temp,exchange,result;
        result = array.slice(0);
        for(i = 0; i &amp;lt; len; i++){
            exchange = 0;
            for(j = len - 1;j &amp;gt; i; j--){
                if(result[j] &amp;lt; result[j-1]){
                    temp = result[j];
                    result[j] = result[j-1];
                    result[j-1] = temp;
                    exchange = 1;
                }
            }
        if (!exchange) return result;
        }
        return result;
    }
    bubbleSort([44,1,3,6,2,55]); //[1, 2, 3, 6, 44, 55]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2、快速排序&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;思想：首先选择一个元素（一般为中间元素）作为基准，然后比这个元素大的全部放在右边，比它小的全部放在左边；然后，在左边和右边分别重复上诉操作（时间复杂度为nlogn）。

代码：
    function quickSort(array){
        sort = function(array){
            var len = array.length;
            if(len &amp;lt;= 1) return array;
            var pivotIndex = Math.floor(array.length / 2);
            var pivot = array.splice(pivotIndex, 1)[0];
            var left = [], right = [];
            for(var i = 0; i &amp;lt; len; i++){
                if(array[i] &amp;lt; pivot){
                    left.push(array[i]);
                }else{
                    right.push(array[i]);
                }
            }
            return sort(left).concat([pivot], sort(right));
        }
        var result = sort(array);
        return result;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 05 Mar 2017 00:00:00 +0800</pubDate>
        <link>https://dandanzhou.github.io/2017/03/05/JavaScript-Algorithms/</link>
        <guid isPermaLink="true">https://dandanzhou.github.io/2017/03/05/JavaScript-Algorithms/</guid>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>面试不会问题总结</title>
        <description>&lt;h4 id=&quot;section&quot;&gt;1、提供一种方法同时检测基本类型与引用类型&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;functipn toType(value){
    return ({}).toString.call(value).match(/\s[a-zA-Z]/)[1].toLowerCase();
}

toType(&#39;1111&#39;)     //&quot;string&quot;
toType([&#39;1&#39;,&#39;2&#39;])  //&quot;array&quot;
toType(new Date);  //&quot;date&quot;
toType(function foo() {console.log(&quot;Test&quot;)}); // &quot;function&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-1&quot;&gt;2、垃圾回收机制&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;两种策略来实现垃圾回收：标记清除 和 引用计数
*标记清除：运行时给所有变量添加上标记，结束时去掉；此后，如果变量再被标记则表示此变量准备被删除
*引用计数：跟踪记录每个值被引用的次数，当声明一个变量并将一个引用类型的值赋给该变量时，这个值的引用次数就是1，如果这个值再被赋值给另一个变量，则引用次数加1。相反，如果一个变量脱离了该值的引用，则该值引用次数减1，当次数为0时，就会等待垃圾收集器的回收。这个方式存在一个比较大的问题就是循环引用，就是说A对象包含一个指向B的指针，对象B也包含一个指向A的引用。 这就可能造成大量内存得不到回收（内存泄露），因为它们的引用次数永远不可能是 0 。
举个例子

        //这段代码为什么会造成内存泄露？
        window.onload = function(){
            var el = document.getElementById(&quot;id&quot;);
            // 执行这段代码的时候，将匿名函数对象赋值给el的onclick属性；然后匿名函数内部又引用了el对象，存在循环引用，所以不能被回收；
            el.onclick = function(){
                alert(el.id);
            }
        }

        //解决方法：
        window.onload = function(){
            var el = document.getElementById(&quot;id&quot;);
            var id = el.id; //解除循环引用
            el.onclick = function(){
                alert(id);
            }
            el = null; // 将闭包引用的外部函数中活动对象清除
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;bindapplycall&quot;&gt;3、bind与apply、call的比较&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//改变this指向func
func.call (this ,  arg1,  arg2 );
func.apply (this ,  [arg1 ,  arg2])

//也是可以改变函数体内 this 的指向
var  foo  = {
        bar :  1,
        eventBind:  function(){
            $(&#39;.someClass&#39; ).on (&#39;click&#39; ,function (event )  {
            /* Act on the event */
            console. log( this. bar);  //1
            }.bind (this ));
        }
    }

*apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；
*apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；
*apply 、 call 、bind 三者都可以利用后续参数传参；
*bind是返回对应函数，便于稍后调用(回调执行的时候)；apply、call则是立即调用 。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;hashrouter&quot;&gt;4、hash、router&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//hash
location.hash则可以用来获取或设置页面的标签值。比如http://domain/#admin的location.hash=”#admin”

//router
*hash形式，当url的hash发生改变时，触发hashchange注册的回调，回调中去进行不同的操作，进行不同的内容的展示。
     &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;router&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;turn white&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#/blue&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;turn blue&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#/green&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;turn green&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;load&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;hashchange&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;body&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// change Page anything&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changeBgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;changeBgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;white&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/blue&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;changeBgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;blue&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/green&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;changeBgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;green&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

 *History API来处理。
 链接：https://www.renfei.org/profile/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;spa&quot;&gt;5、SPA&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://web.jobbole.com/86558/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 04 Mar 2017 00:00:00 +0800</pubDate>
        <link>https://dandanzhou.github.io/2017/03/04/%E9%9D%A2%E8%AF%95%E4%B8%AD%E4%B8%8D%E4%BC%9A%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">https://dandanzhou.github.io/2017/03/04/%E9%9D%A2%E8%AF%95%E4%B8%AD%E4%B8%8D%E4%BC%9A%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        
        <category>Others</category>
        
        
      </item>
    
      <item>
        <title>《http图解》读后感</title>
        <description>&lt;p&gt;读了《http图解》想到了去年面试的时候，面试官问过我一个问题：url输入浏览器到页面呈现给我们，中间发生了什么？当时听到这个问题的时候脑子里空空如也~~如今回想起来，如果面试官如果再次问起，我会怎样回答呢？
Now,我会给出我自己的理解：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、url输入到浏览器，负责域名解析的DNS服务会通过域名查找对应的IP地址（也就是获得url对应的ip地址）；
2、利用TCP/IP协议族进行网络通信，发送数据包，建立网络连接。客户端（浏览器）会向服务器端发送请求，服务端会响应客户端的请求。
其中，客户端（浏览器）向服务器端发送请求，发送端会经历应用层（http报文）-&amp;gt;传输层（增加TCP首部）-&amp;gt;网络层（IP数据包，增加IP首部）-&amp;gt;数据链路层（增加以太网首部）；服务端则相反。
3、客户端渲染，渲染引擎对html进行转换，转化成能够被DOM处理的形式，接着转换成一个dom树，在解析html的过程，会发送请求把对应的内容获取到，同时进行css的解析，构建出css样式规则应用到dom树上，然后进行一定的布局处理，最后根据这棵渲染树在浏览器窗口中进行绘制。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以下这张图（http图解中的）可以诠释1、2过程：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/http.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;http&quot;&gt;http报文&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/http1.jpeg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/http2.jpeg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/http3.jpeg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/http4.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 29 Nov 2016 00:00:00 +0800</pubDate>
        <link>https://dandanzhou.github.io/2016/11/29/http-reading/</link>
        <guid isPermaLink="true">https://dandanzhou.github.io/2016/11/29/http-reading/</guid>
        
        <category>Others</category>
        
        
      </item>
    
      <item>
        <title>总结及计划</title>
        <description>&lt;p&gt;打开博客，突然发现自己已经好久没有写博客了，再忙也得抽时间写写博客。&lt;/p&gt;

&lt;p&gt;来到新公司将近半年了，感觉收获的不少也不是很多，大部分还是自己很少总结。今天刚好有时间，总结一下顺便计划下年底前要完成的任务。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;总结&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、了解到了typeSript；

    *TypeScript增加了可选类型、类和模块
    *TypeSript可编译成可读的、标准的JavaScript（ts编译成js）
    *TypeScript扩展了JavaScript语法，已有的JavaScript代码可直接与现有的TypeScript一起运行
    *Arrow函数（类似于c#的Lambda函数）

2、熟悉了服务器上一些基本的linux命令；

3、前端一些细小的知识点得到了理解。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;11月底要完成的事&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、W3C/HTTP规范、HTTP协议、Web安全；
2、继续把python看完并做出一个demo；
3、熟练编写常用的数据结构和算法；
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 09 Nov 2016 00:00:00 +0800</pubDate>
        <link>https://dandanzhou.github.io/2016/11/09/plan/</link>
        <guid isPermaLink="true">https://dandanzhou.github.io/2016/11/09/plan/</guid>
        
        <category>Others</category>
        
        
      </item>
    
      <item>
        <title>webpack打包工具</title>
        <description>&lt;p&gt;最近在webpack上折腾了几天，终于有了眉目，差点就要放弃了，折腾的过程中最大的收获就是：掌握了学习新东西的方法～～&lt;/p&gt;

&lt;h2 id=&quot;webpack&quot;&gt;折腾的第一点:下载webpack&lt;/h2&gt;
&lt;p&gt;最开始全局下载webpack,也就是npm install -g webpack比较顺利，但是后来在根目录下npm install webpack，一直报错如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/webpack1.jpg&quot; alt=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/webpack1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最关键的是我在别人电脑上一安装就成了－－
在网上查了各种解决方案，但最终都木有解决问题，后来突然想到了之前装gulp的时候，每次装到gulp-sass时会出现问题（后来直接把以前好的gulp－sass复制了过来）；
于是我决定把根目录下的node_modules全删了，重新安装，当安装到gulp－sass,同样出现了问题，在网上找到了一个解决方案，直接执行：npm install rebulid,终于成功安装了gulp;
接着在根目录下安装webpack时，成功了！！！&lt;/p&gt;

&lt;h2 id=&quot;webpack-1&quot;&gt;折腾的第二点：webpack的配置文件及运行&lt;/h2&gt;

&lt;p&gt;为了实际演示，我在目前的项目中，用webpack打包了ts文件如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/webpack2.png&quot; alt=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/webpack2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在做好配置后，运行webpack,也出现了问题，原因是在根目录下没有下载ts-loader,后来才知道，每一种模块对应的loader都应该先下载（只要配置中有就要下载）&lt;/p&gt;

&lt;p&gt;目前，只是webpack有了一个大概的了解和大概的实际操作，还需我继续去探索～～&lt;/p&gt;

</description>
        <pubDate>Thu, 04 Aug 2016 00:00:00 +0800</pubDate>
        <link>https://dandanzhou.github.io/2016/08/04/webpack/</link>
        <guid isPermaLink="true">https://dandanzhou.github.io/2016/08/04/webpack/</guid>
        
        <category>Others</category>
        
        
      </item>
    
      <item>
        <title>随笔</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;想到啥就写啥了&lt;/h2&gt;

&lt;p&gt;7月的尾巴渐渐逼近，不得不感叹时间之飞快，这个月貌似发生的事儿还是挺多的，不过总算是挺过来了。。。&lt;/p&gt;

&lt;p&gt;新公司也没有之前那么忙了，该多花点功夫在新技术了，上个星期借的书，得快点看完了，感觉自己有时候开始有点懒，还是得慢慢改掉这个坏毛病。&lt;/p&gt;

&lt;p&gt;偶然看到的几句话还是挺激励我的：放下懒惰 ––奋斗改变命运，绝招就是把一件平凡的小事做到炉火纯青，就是绝活。提醒自己，记住自己的提醒，上进的你，快乐的你，健康的你，善良的你，一定会有一个灿烂的人生。&lt;/p&gt;

&lt;p&gt;减肥和学习是女人的终生事业啊，哈哈哈哈，已经减了两个星期，初见成效，但还没达到想要的效果，还得继续努力；学习吧，定是不能落下的，按照自己的脚步，慢慢来，总会有属于我的小幸运～～&lt;/p&gt;

</description>
        <pubDate>Sat, 23 Jul 2016 00:00:00 +0800</pubDate>
        <link>https://dandanzhou.github.io/2016/07/23/others/</link>
        <guid isPermaLink="true">https://dandanzhou.github.io/2016/07/23/others/</guid>
        
        <category>Others</category>
        
        
      </item>
    
      <item>
        <title>web静态资源缓存自动更新</title>
        <description>&lt;p&gt;核心：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在每次发布之前，利用Gulp对所有的静态资源进行预处理，重命名为原文件名 + 文件MD5值 + 文件后缀名的形式。比如register.js重命名为register-87f3f22ee7.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;步骤：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、先用npm下载gulp-clean  gulp-rev  gulp-rev-collector这几个依赖，其次配置好gulpfile.js里面的内容（已配置好），有兴趣可去项目根目录里面查看；
2、如果第一步已经完成，如果你只是修改了www端得css或者ts，依次执行gulp www-clean( 取决于你gulpfile.js里面的配置) 、gulp ，然后在你配置的相关文件里面就会生成对应的rev-manifest.json（路径：public/assets/rev/css/和public/assets/rev/js/），如下图所示
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/cache1.png&quot; alt=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/cache1.png&quot; /&gt;
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/cache2.png&quot; alt=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/cache2.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3、到这里对应css名称就会发生对应的变化
但是js没有，为什么呢？？？？？？ 因为我们项目里面用的是require模块加载，在每个html里面都是require对应的js，而不是普通的&amp;lt;script src=&quot;&quot;&amp;gt;&amp;lt;/script&amp;gt;。
在网上找了一些相关资料，有两种还凑合：
(1)在require.congfig配置里面加上 urlArgs: &quot;bust=&quot; +  (new Date()).getTime()，但这只适合开发环境
(2)在每次发布的时候需要根据rev-manifest在require.congfig对模块进行mapping，将配置文件以内联JS的形式写入到模版页面里面，类似于：
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/cache3.png&quot; alt=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/cache3.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;看起来有点麻烦哈，因为每次修改完js或者pull代码获得更新的js，rev-manifest.json里面对应的js名称后的一串字符会自动变化，但是require.congfig里面需要我们手动去改变，这需要我们细心啊啊啊啊啊！！！！
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 11 Jun 2016 00:00:00 +0800</pubDate>
        <link>https://dandanzhou.github.io/2016/06/11/web-clear-cache/</link>
        <guid isPermaLink="true">https://dandanzhou.github.io/2016/06/11/web-clear-cache/</guid>
        
        <category>Others</category>
        
        
      </item>
    
      <item>
        <title>支付拦截解决方案</title>
        <description>&lt;p&gt;额，先说点题外话哈。真实惭愧啊，距离上次写博客差不多有两个月的时间了。该写了，直接进入正题吧，哈哈哈哈…&lt;/p&gt;

&lt;p&gt;如果你是直接点击充值跳到另外一个页面，不用向第三方传一些数据，以下就不用看了。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;支付拦截解决方案&lt;/h2&gt;
&lt;p&gt;上个星期和后端做支付对接的时候，遇到一个小问题：点击充值按钮进行充值跳到第三方充值页的时候，充值页被拦截了！！！！！&lt;/p&gt;

&lt;p&gt;背景：点击充值的时候后台要我先传金额获取一些数据然后再掉充值接口跳到支付页&lt;/p&gt;

&lt;p&gt;于是出现如下图所示：
 &lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/fail.png&quot; alt=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/fail.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;后来在网上查找了原因，原来是这样滴：
    用户自己发起的浏览器不会阻止，如果触发动作是自动执行的则浏览器会阻止打开。（进入ajax是自动的但是ajax执行完）会认为你是弹广告xxxxxxx！想不被阻止就想办法让动作换成用户自己发起的。&lt;/p&gt;

&lt;p&gt;所以有了以下解决方案：
    由于之前跳到支付页用的xx.submit()，是在ajax内自动执行完的，并不是用户自己发起的；所以我们需要一个过渡，就是把这个动作赋予用户自己完成。
    我的想法是点击充值时让先弹出一个窗口确定输入的金额，然后让用户点击确定调用xx.sumbit();经过试验真的成功了。&lt;/p&gt;

&lt;p&gt;成功后的如下图：
  &lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/way.png&quot; alt=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/way.png&quot; /&gt;
  &lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/success.png&quot; alt=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/success.png&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 05 Jun 2016 00:00:00 +0800</pubDate>
        <link>https://dandanzhou.github.io/2016/06/05/ajax-interception/</link>
        <guid isPermaLink="true">https://dandanzhou.github.io/2016/06/05/ajax-interception/</guid>
        
        <category>Others</category>
        
        
      </item>
    
      <item>
        <title>神奇的BFC</title>
        <description>&lt;h2 id=&quot;bfc&quot;&gt;神奇的BFC&lt;/h2&gt;
&lt;p&gt;BFC，当别人向我提到这个词的时候，我脑袋里是一片空白，工作大半年了，连这个都不知道，甚是惭愧啊~~
于是在网上查找相关资料整理如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BFC定义及规则&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BFC(block formatting context),汉译为块级格式化上下文 
* 内部box会在垂直方向一个接一个放置；
* Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠；
* 每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此；
* BFC的区域不会与float box重叠；
* BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此；
* 计算BFC的高度时，浮动元素也参与计算。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;哪些元素会生成BFC&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 根元素；
* float属性不为none；
* position为absolute或fixed；
* display为inline-block, table-cell, table-caption, flex, inline-flex；
* overflow不为visible。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;BFC的作用及原理&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 自适应两栏布局（BFC的区域不会与float box重叠，我们可以通过通过触发main生成BFC， 来实现自适应两栏布局）
* 清除内部浮动（计算BFC的高度时，浮动元素也参与计算）
* 防止垂直margin重叠（Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。因此生成一个BFC。那么两块便不属于同一个BFC，就不会发生margin重叠了）
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 11 Mar 2016 01:04:00 +0800</pubDate>
        <link>https://dandanzhou.github.io/2016/03/11/BFC/</link>
        <guid isPermaLink="true">https://dandanzhou.github.io/2016/03/11/BFC/</guid>
        
        <category>CSS</category>
        
        
      </item>
    
      <item>
        <title>Promise初探</title>
        <description>&lt;h2 id=&quot;promise&quot;&gt;Promise初探&lt;/h2&gt;
&lt;p&gt;Promise是抽象异步处理对象以及对其进行各种操作的组件。&lt;/p&gt;

&lt;p&gt;创建promise对象的流程如下所示。		
 1、new Promise(fn) 返回一个promise对象&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var promise = new Promise(function(resolve, reject) {		
            // 异步处理		
            // 处理结束后、调用resolve 或 reject		
    });		
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2、在fn 中指定异步等处理&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;处理结果正常的话，调用resolve(处理结果值)		
处理结果错误的话，调用reject(Error对象)		
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Promise.reject(error)是和 Promise.resolve(value) 类似的静态方法，是 new Promise() 方法的快捷方式。		
 比如 Promise.resolve(42); 可以认为是以下代码的语法糖。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new Promise(function(resolve){		
  resolve(42);		
});		
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;比如 Promise.reject(new Error(“出错了”)) 就是下面代码的语法糖形式。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new Promise(function(resolve,reject){		
   reject(new Error(&quot;出错了&quot;));		
});		
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;promise可以写成方法链的形式&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function taskA() {		
    console.log(&quot;Task A&quot;);		
}		
function taskB() {		
    console.log(&quot;Task B&quot;);		
}		
function onRejected(error) {		
     console.log(&quot;Catch Error: A or B&quot;, error);		
}		
function finalTask() {		
     console.log(&quot;Final Task&quot;);		
}		
        
var promise = Promise.resolve();		
promise		
   .then(taskA)		
   .then(taskB)		
   .catch(onRejected)		
   .then(finalTask);		
                
运行结果：Task A		
Task B		
Final Task	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 10 Mar 2016 05:12:00 +0800</pubDate>
        <link>https://dandanzhou.github.io/2016/03/10/promise/</link>
        <guid isPermaLink="true">https://dandanzhou.github.io/2016/03/10/promise/</guid>
        
        <category>JavaScript</category>
        
        
      </item>
    
  </channel>
</rss>
