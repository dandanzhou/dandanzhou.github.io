<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daisydan</title>
    <description>前端开发工程师一枚！</description>
    <link>http://localhost:3000/</link>
    <atom:link href="http://localhost:3000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 19 Mar 2017 16:34:29 +0800</pubDate>
    <lastBuildDate>Sun, 19 Mar 2017 16:34:29 +0800</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>Headers里必须详细了解的</title>
        <description>&lt;p&gt;Http消息头目前大致分为请求头和响应头，具体详细内容可&lt;a href=&quot;https://itbilu.com/other/relate/EJ3fKUwUx.html&quot;&gt;点击查看&lt;/a&gt;，这里我就详细描述三点如下：&lt;/p&gt;

&lt;p&gt;一、浏览器缓存相关&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、Cache-Control
    no-cache（并不代表浏览器不缓存，而是在缓存前要向服务器确认资源是否被更改）；
    no-store（绝对禁止缓存）；
    max-age（在max-age这段时间里浏览器就不会再向服务器发送请求了）；
    s-maxage（只用于共享缓存，如CDN缓存，若存在s-maxage，则会覆盖掉max-age和Expires header）；
    public （指定响应会被缓存，并且在多用户间共享）；
    private （响应只作为私有的缓存，不能在用户间共享。如果要求HTTP认证，响应会自动设置为private）
    must-revalidate（指定如果页面是过期的，则去服务器进行获取）。

2、Expires
    缓存过期时间，用来指定资源到期的时间，在响应请求头中告诉浏览器在这个时间前浏览器可以直接从它的缓存取数据，而无需再次请求。

3、Last-modified
    服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式。当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。

4、ETag
    根据实体内容生成一段hash字符串，标识资源的状态，由服务端产生。浏览器会将这串字符串传回服务器，验证资源是否已经修改。它可以解决Last-modified存在的一些问题：精确得到资源的最后修改时间，甚至精确到秒；一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;想进一步理解304&lt;a href=&quot;http://www.cnblogs.com/ziyunfei/archive/2012/11/17/2772729.html&quot;&gt;可点击查看&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;大概流程图如下： &lt;br /&gt;
&lt;img src=&quot;http://www.alloyteam.com/wp-content/uploads/2016/03/%E5%9B%BE%E7%89%8761.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;二、Keep-Alive模式&lt;/p&gt;

&lt;p&gt;我们都知道HTTP协议为无连接的协议，所以每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开。那有什么办法可以避免建立或者重新建立连接呢？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;肯定是有的，那就是使用Keep-Alive模式，即在header里面设置connection:keep-alive。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Keep-Alive模式发送完数据http，服务器不会自动断开连接，那客户端如何判断请求所得到的响应数据已经接收完成（或者说如何知道服务器已经发生完了数据）？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、使用Conent-Length，表示实体内容长度，客户端（服务器）可以根据这个值来判断数据是否接收完成；但是如果是动态页面等时，服务器是不可能预先知道内容大小，这时就要看接下来第二条了；

2、使用Transfer-Encoding，如果一边产生数据，一边发给客户端，服务器就需要使用&quot;Transfer-Encoding: chunked&quot;这样的方式来代替Content-Length。chunk编码将数据分成一块一块的发生。Chunked编码将使用若干个Chunk串连而成，由一个标明长度为0 的chunk标示结束。每个Chunk分为头部和正文两部分，头部内容指定正文的字符总数（十六进制的数字 ）和数量单位（一般不写），正文部分就是指定长度的实际内容，两部分之间用回车换行(CRLF) 隔开。在最后一个长度为0的Chunk中的内容是称为footer的内容，是一些附加的Header信息（通常可以直接忽略
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sat, 18 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2017/03/18/http-headers/</link>
        <guid isPermaLink="true">http://localhost:3000/2017/03/18/http-headers/</guid>
        
        <category>Others</category>
        
        
      </item>
    
      <item>
        <title>Vue实践中的几个折腾点</title>
        <description>&lt;h4 id=&quot;section&quot;&gt;组件间事件派发与接收&lt;/h4&gt;
&lt;p&gt;在用vue实现外卖页面的时候，当点击+的时候小球下落一个，但+和小球分别在不同的组件中。这是就需要在两个组件间进行事件的通信。由于在vue2.0中$dispatch 和 $broadcast被弃用，需要采用新的方式如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在初始化vue之前，给data添加一个 名字为eventhub 的空vue对象
/* eslint-disable no-new */
new Vue({
    el: '#app',
    router,
    polyfill: true,
    template: '&amp;lt;App/&amp;gt;',
    data: {
        eventHub: new Vue()
    },
    components: {App}
});

某一个组件内调用事件触发：this.$root.eventHub.$emit('eventName', event.target);

另一个组件内调用事件接收, 在组件销毁时解除事件绑定,使用$off方法
created:{
    this.$root.eventHub.$on('eventName',(target) =&amp;gt; {
        this.functionName(target)
    });
},
method:{
    functionName(target) {
        console.log(target);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;vue20-&quot;&gt;Vue2.0 小球下落动画实现&lt;/h4&gt;
&lt;p&gt;因为只有enter过程，所以使用vue钩子beforeEnter、enter、afterEnter&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;transition name=&quot;drop&quot; v-for=&quot;ball in balls&quot; key=&quot;ball&quot; @before-enter=&quot;beforeEnter&quot; @enter=&quot;enter&quot; @after-enter=&quot;afterEnter&quot;&amp;gt;
      &amp;lt;div v-show=&quot;ball.show&quot; class=&quot;ball&quot;&amp;gt;
        &amp;lt;div class=&quot;inner inner-hook&quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
 &amp;lt;/transition&amp;gt;

  beforeEnter: function (el) {
    let count = this.balls.length;
    while (count--) {
      let ball = this.balls[count];
      if (ball.show) {
        let rect = ball.el.getBoundingClientRect();
        let x = rect.left - 32;
        let y = -(window.innerHeight - rect.top - 22);
        el.style.display = '';
        el.style.webkitTransform = `translate3D(0,${y}px,0)`;
        el.style.transform = `translate3D(0,${y}px,0)`;
        let inner = el.getElementsByClassName('inner-hook')[0];
        inner.style.webkitTransform = `translate3D(${x}px,0,0)`;
        inner.style.transform = `translate3D(${x}px,0,0)`;
      }
    }
  },
  // 此回调函数是可选项的设置
  // 与 CSS 结合时使用
  enter: function (el, done) {
    /* eslint-disable no-unused-vars */
    let refresh = el.offsetHeight;
    this.$nextTick(() =&amp;gt; {
      el.style.display = '';
      el.style.webkitTransform = 'translate3D(0,0,0)';
      el.style.transform = 'translate3D(0,0,0)';
      let inner = el.getElementsByClassName('inner-hook')[0];
      inner.style.webkitTransform = 'translate3D(0,0,0)';
      inner.style.transform = 'translate3D(0,0,0)';
    });
    done();
  },
  afterEnter: function (el) {
    let ball = this.balls[0];
    ball.show = false;
    el.style.display = 'none';
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;section-1&quot;&gt;让项目在服务器后台执行&lt;/h4&gt;
&lt;p&gt;起初用的是nohub npm run dev &amp;amp;  但是在服务器上，该命令不生效；后来用screen npm run dev就完美解决了。&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2017/03/15/Vue%E6%8A%98%E8%85%BE%E7%82%B9/</link>
        <guid isPermaLink="true">http://localhost:3000/2017/03/15/Vue%E6%8A%98%E8%85%BE%E7%82%B9/</guid>
        
        <category>Others</category>
        
        
      </item>
    
      <item>
        <title>Fetch API</title>
        <description>&lt;p&gt;自我从事前端，一直使用XMLHttpRequest(XHR)发送异步请求；直到最近了解到Fetch API，发现它完美基于事件的模型与最近流行的 Promise 和 generator 异步编程模型，然后果断替换掉ajax换这个实用的方法来获取网络资源。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;简单示例&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Fetch API中最常用的是fetch()方法，该方法最简单的形式是，接受一个URL参数并返回以一个promise对象
fetch(&quot;/data.json&quot;).then(function(res) {
    // res instanceof Response == true.
    if (res.ok) {
        res.json().then(function(data) {
        console.log(data.entries);
        });
    } else {
        console.log(&quot;Looks like the response wasn't perfect, got status&quot;, res.status);
    }
    }, function(e) {
    console.log(&quot;Fetch failed!&quot;, e);
});

如果是提交一个POST请求，代码如下：
fetch(&quot;http://www.example.org/submit.php&quot;, {
    method: &quot;POST&quot;,
    headers: {
        &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;
    },
    body: &quot;firstName=Nikhil&amp;amp;favColor=blue&amp;amp;password=easytoguess&quot;
    }).then(function(res) {
    if (res.ok) {
        alert(&quot;Perfect! Your settings are saved.&quot;);
    } else if (res.status == 401) {
        alert(&quot;Oops! You are not authorized.&quot;);
    }
    }, function(e) {
    alert(&quot;Error submitting form!&quot;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;fetch3&quot;&gt;Fetch引入的3个接口&lt;/h4&gt;
&lt;p&gt;1、Headers 它可以是键值对，也可以是一个多维数组或JS字面量对象；可以通过has来检索它是否有那个内容。&lt;/p&gt;

&lt;p&gt;2、Request 通过构造一个 Request 对象来获取网络资源，构造函数需要 URL、method 和 headers 参数，同时也可以提供请求体（body）、请求模式（mode）、credentials 和 cache hints 等参数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var uploadReq = new Request(&quot;/uploadImage&quot;, {
    method: &quot;POST&quot;,
    headers: {
        &quot;Content-Type&quot;: &quot;image/png&quot;,
    },
    body: &quot;image data&quot;
});
mode 参数用来决定是否允许跨域请求，以及哪些 response 属性可读。可选的 mode 值为 &quot;same-origin&quot;（所有的请求遵守同源策略）、&quot;no-cors&quot;（默认，该模式允许来自 CDN 的脚本、其他域的图片和其他一些跨域资源，但是首先有个前提条件，就是请求的 method 只能是HEAD、GET 或 POST。此外，如果 ServiceWorkers 拦截了这些请求，它不能随意添加或者修改除这些之外 Header 属性。第三，JS 不能访问 Response 对象中的任何属性，这确保了跨域时 ServiceWorkers 的安全和隐私信息泄漏问题）以及 &quot;cors&quot;（用于跨域请求）。另外，credentials 属性决定了是否可以跨域访问 cookie 。该属性与 XHR 的withCredentials 标志相同，但是只有三个值，分别是 omit（默认）、same-origin 和 include。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3、Response  fetch() 的回调中获得，有一个 type 属性，它的值可能是 “basic”、”cors”、”default”、”error” 或 “opaque”。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;流和克隆&lt;/h4&gt;
&lt;p&gt;1、注意Request和Response的body只能被读取一次！它们有一个属性叫bodyUsed，读取一次之后设置为true，就不能再读取了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var res = new Response(&quot;one time use&quot;);
    console.log(res.bodyUsed); // false
    res.text().then(function(v) {
    console.log(res.bodyUsed); // true
    });
    console.log(res.bodyUsed); // true

    res.text().catch(function(e) {
    console.log(&quot;Tried to read already consumed Response&quot;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2、API提供了一个clone()方法。调用这个方法可以得到一个克隆对象。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;addEventListener('fetch', function(evt) {
    var sheep = new Response(&quot;Dolly&quot;);
    console.log(sheep.bodyUsed); // false
    var clone = sheep.clone();
    console.log(clone.bodyUsed); // false

    clone.text();
    console.log(sheep.bodyUsed); // false
    console.log(clone.bodyUsed); // true

    evt.respondWith(cache.add(sheep.clone()).then(function(e) {
        return sheep;
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不过要记得，clone()必须要在读取之前调用，也就是先clone()再读取。&lt;/p&gt;

&lt;h4 id=&quot;vue--vue-fetch&quot;&gt;vue + vue-fetch&lt;/h4&gt;
&lt;p&gt;学习了fetch，立马拿到最近做demo中去应用。
首先，npm install vue-fetch，然后相关代码如下：
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/fetch-1.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/fetch-2.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/fetch-3.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/fetch-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2017/03/06/Fetch-API/</link>
        <guid isPermaLink="true">http://localhost:3000/2017/03/06/Fetch-API/</guid>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>JS常用排序算法总结</title>
        <description>&lt;p&gt;1、插入排序&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;思想：构建有序数列，对于未排序的数据，在已排序的数据中从后向前找到合适的位置插入直到未排序的数据个数为0（时间复杂度为n^2）；（注意：在已排序的中找到合适的位置可以采用二分查找提高效率，这样最后的时间复杂度为n^2）。

代码：
    function insertSort(array){
        var i,j,temp,low,mid,high,result,len = array.length;
        if(len &amp;lt;= 1) return array;
        result = array.slice(0);
        for(i = 1;i &amp;lt; len;i++){
            temp = result[i];
            low = 0;
            high = i - 1;
            while(low &amp;lt;= high){
                mid = parseInt((low+high)/2, 10);
                if(temp &amp;lt; result[mid]) high = mid - 1;
                else low = mid + 1;
            }
            for(j = i - 1;j &amp;gt;= high + 1;j--){
                result[j+1] = result[j];
            }
            result[j+1] = temp;
        }
        return result;
    }
    insertSort([1,3,55,4,77]);  //[1, 3, 4, 55, 77]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2、冒泡排序&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;思想：相邻两元素进行比较，若前一个元素大于后一个元素，则交换顺序，这一轮会找出最大或者最小的元素；然后在剩下的元素重复上述操作直至所有元素都已排序完成,时间复杂度为n^2。（优化思路：当一次遍历前后数组不产生变化时，说明该数组已经有序，结束排序）

代码：
    function bubbleSort(array){
        var len = array.length,i,j,temp,exchange,result;
        result = array.slice(0);
        for(i = 0; i &amp;lt; len; i++){
            exchange = 0;
            for(j = len - 1;j &amp;gt; i; j--){
                if(result[j] &amp;lt; result[j-1]){
                    temp = result[j];
                    result[j] = result[j-1];
                    result[j-1] = temp;
                    exchange = 1;
                }
            }
        if (!exchange) return result;
        }
        return result;
    }
    bubbleSort([44,1,3,6,2,55]); //[1, 2, 3, 6, 44, 55]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2、快速排序&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;思想：首先选择一个元素（一般为中间元素）作为基准，然后比这个元素大的全部放在右边，比它小的全部放在左边；然后，在左边和右边分别重复上诉操作（时间复杂度为nlogn）。

代码：
    function quickSort(array){
        sort = function(array){
            var len = array.length;
            if(len &amp;lt;= 1) return array;
            var pivotIndex = Math.floor(array.length / 2);
            var pivot = array.splice(pivotIndex, 1)[0];
            var left = [], right = [];
            for(var i = 0; i &amp;lt; len; i++){
                if(array[i] &amp;lt; pivot){
                    left.push(array[i]);
                }else{
                    right.push(array[i]);
                }
            }
            return sort(left).concat([pivot], sort(right));
        }
        var result = sort(array);
        return result;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 05 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2017/03/05/JavaScript-Algorithms/</link>
        <guid isPermaLink="true">http://localhost:3000/2017/03/05/JavaScript-Algorithms/</guid>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>面试不会问题总结</title>
        <description>&lt;h4 id=&quot;section&quot;&gt;1、提供一种方法同时检测基本类型与引用类型&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;functipn toType(value){
    return ({}).toString.call(value).match(/\s[a-zA-Z]/)[1].toLowerCase();
}

toType('1111')     //&quot;string&quot;
toType(['1','2'])  //&quot;array&quot;
toType(new Date);  //&quot;date&quot;
toType(function foo() {console.log(&quot;Test&quot;)}); // &quot;function&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-1&quot;&gt;2、垃圾回收机制&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;两种策略来实现垃圾回收：标记清除 和 引用计数
*标记清除：运行时给所有变量添加上标记，结束时去掉；此后，如果变量再被标记则表示此变量准备被删除
*引用计数：跟踪记录每个值被引用的次数，当声明一个变量并将一个引用类型的值赋给该变量时，这个值的引用次数就是1，如果这个值再被赋值给另一个变量，则引用次数加1。相反，如果一个变量脱离了该值的引用，则该值引用次数减1，当次数为0时，就会等待垃圾收集器的回收。这个方式存在一个比较大的问题就是循环引用，就是说A对象包含一个指向B的指针，对象B也包含一个指向A的引用。 这就可能造成大量内存得不到回收（内存泄露），因为它们的引用次数永远不可能是 0 。
举个例子

        //这段代码为什么会造成内存泄露？
        window.onload = function(){
            var el = document.getElementById(&quot;id&quot;);
            // 执行这段代码的时候，将匿名函数对象赋值给el的onclick属性；然后匿名函数内部又引用了el对象，存在循环引用，所以不能被回收；
            el.onclick = function(){
                alert(el.id);
            }
        }

        //解决方法：
        window.onload = function(){
            var el = document.getElementById(&quot;id&quot;);
            var id = el.id; //解除循环引用
            el.onclick = function(){
                alert(id);
            }
            el = null; // 将闭包引用的外部函数中活动对象清除
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;bindapplycall&quot;&gt;3、bind与apply、call的比较&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//改变this指向func
func.call (this ,  arg1,  arg2 );
func.apply (this ,  [arg1 ,  arg2])

//也是可以改变函数体内 this 的指向
var  foo  = {
        bar :  1,
        eventBind:  function(){
            $('.someClass' ).on ('click' ,function (event )  {
            /* Act on the event */
            console. log( this. bar);  //1
            }.bind (this ));
        }
    }

*apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；
*apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；
*apply 、 call 、bind 三者都可以利用后续参数传参；
*bind是返回对应函数，便于稍后调用(回调执行的时候)；apply、call则是立即调用 。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;hashrouter&quot;&gt;4、hash、router&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//hash
location.hash则可以用来获取或设置页面的标签值。比如http://domain/#admin的location.hash=”#admin”

//router
*hash形式，当url的hash发生改变时，触发hashchange注册的回调，回调中去进行不同的操作，进行不同的内容的展示。
     &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;router&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;turn white&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#/blue&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;turn blue&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#/green&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;turn green&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'load'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hashchange'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// change Page anything&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changeBgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;changeBgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'white'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;changeBgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;changeBgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

 *History API来处理。
 链接：https://www.renfei.org/profile/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;spa&quot;&gt;5、SPA&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://web.jobbole.com/86558/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 04 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2017/03/04/%E9%9D%A2%E8%AF%95%E4%B8%AD%E4%B8%8D%E4%BC%9A%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">http://localhost:3000/2017/03/04/%E9%9D%A2%E8%AF%95%E4%B8%AD%E4%B8%8D%E4%BC%9A%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        
        <category>Others</category>
        
        
      </item>
    
      <item>
        <title>《http图解》读后感</title>
        <description>&lt;p&gt;读了《http图解》想到了去年面试的时候，面试官问过我一个问题：url输入浏览器到页面呈现给我们，中间发生了什么？当时听到这个问题的时候脑子里空空如也~~如今回想起来，如果面试官如果再次问起，我会怎样回答呢？
Now,我会给出我自己的理解：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、url输入到浏览器，负责域名解析的DNS服务会通过域名查找对应的IP地址（也就是获得url对应的ip地址）；
2、利用TCP/IP协议族进行网络通信，发送数据包，建立网络连接。客户端（浏览器）会向服务器端发送请求，服务端会响应客户端的请求。
其中，客户端（浏览器）向服务器端发送请求，发送端会经历应用层（http报文）-&amp;gt;传输层（增加TCP首部）-&amp;gt;网络层（IP数据包，增加IP首部）-&amp;gt;数据链路层（增加以太网首部）；服务端则相反。
3、客户端渲染，渲染引擎对html进行转换，转化成能够被DOM处理的形式，接着转换成一个dom树，在解析html的过程，会发送请求把对应的内容获取到，同时进行css的解析，构建出css样式规则应用到dom树上，然后进行一定的布局处理，最后根据这棵渲染树在浏览器窗口中进行绘制。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以下这张图（http图解中的）可以诠释1、2过程：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/http.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;http&quot;&gt;http报文&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/http1.jpeg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/http2.jpeg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/http3.jpeg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/http4.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 29 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2016/11/29/http-reading/</link>
        <guid isPermaLink="true">http://localhost:3000/2016/11/29/http-reading/</guid>
        
        <category>Others</category>
        
        
      </item>
    
      <item>
        <title>总结及计划</title>
        <description>&lt;p&gt;打开博客，突然发现自己已经好久没有写博客了，再忙也得抽时间写写博客。&lt;/p&gt;

&lt;p&gt;来到新公司将近半年了，感觉收获的不少也不是很多，大部分还是自己很少总结。今天刚好有时间，总结一下顺便计划下年底前要完成的任务。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;总结&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、了解到了typeSript；

    *TypeScript增加了可选类型、类和模块
    *TypeSript可编译成可读的、标准的JavaScript（ts编译成js）
    *TypeScript扩展了JavaScript语法，已有的JavaScript代码可直接与现有的TypeScript一起运行
    *Arrow函数（类似于c#的Lambda函数）

2、熟悉了服务器上一些基本的linux命令；

3、前端一些细小的知识点得到了理解。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;11月底要完成的事&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、W3C/HTTP规范、HTTP协议、Web安全；
2、继续把python看完并做出一个demo；
3、熟练编写常用的数据结构和算法；
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 09 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2016/11/09/plan/</link>
        <guid isPermaLink="true">http://localhost:3000/2016/11/09/plan/</guid>
        
        <category>Others</category>
        
        
      </item>
    
      <item>
        <title>webpack打包工具</title>
        <description>&lt;p&gt;最近在webpack上折腾了几天，终于有了眉目，差点就要放弃了，折腾的过程中最大的收获就是：掌握了学习新东西的方法～～&lt;/p&gt;

&lt;h2 id=&quot;webpack&quot;&gt;折腾的第一点:下载webpack&lt;/h2&gt;
&lt;p&gt;最开始全局下载webpack,也就是npm install -g webpack比较顺利，但是后来在根目录下npm install webpack，一直报错如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/webpack1.jpg&quot; alt=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/webpack1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最关键的是我在别人电脑上一安装就成了－－
在网上查了各种解决方案，但最终都木有解决问题，后来突然想到了之前装gulp的时候，每次装到gulp-sass时会出现问题（后来直接把以前好的gulp－sass复制了过来）；
于是我决定把根目录下的node_modules全删了，重新安装，当安装到gulp－sass,同样出现了问题，在网上找到了一个解决方案，直接执行：npm install rebulid,终于成功安装了gulp;
接着在根目录下安装webpack时，成功了！！！&lt;/p&gt;

&lt;h2 id=&quot;webpack-1&quot;&gt;折腾的第二点：webpack的配置文件及运行&lt;/h2&gt;

&lt;p&gt;为了实际演示，我在目前的项目中，用webpack打包了ts文件如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/webpack2.png&quot; alt=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/webpack2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在做好配置后，运行webpack,也出现了问题，原因是在根目录下没有下载ts-loader,后来才知道，每一种模块对应的loader都应该先下载（只要配置中有就要下载）&lt;/p&gt;

&lt;p&gt;目前，只是webpack有了一个大概的了解和大概的实际操作，还需我继续去探索～～&lt;/p&gt;

</description>
        <pubDate>Thu, 04 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2016/08/04/webpack/</link>
        <guid isPermaLink="true">http://localhost:3000/2016/08/04/webpack/</guid>
        
        <category>Others</category>
        
        
      </item>
    
      <item>
        <title>随笔</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;想到啥就写啥了&lt;/h2&gt;

&lt;p&gt;7月的尾巴渐渐逼近，不得不感叹时间之飞快，这个月貌似发生的事儿还是挺多的，不过总算是挺过来了。。。&lt;/p&gt;

&lt;p&gt;新公司也没有之前那么忙了，该多花点功夫在新技术了，上个星期借的书，得快点看完了，感觉自己有时候开始有点懒，还是得慢慢改掉这个坏毛病。&lt;/p&gt;

&lt;p&gt;偶然看到的几句话还是挺激励我的：放下懒惰 ––奋斗改变命运，绝招就是把一件平凡的小事做到炉火纯青，就是绝活。提醒自己，记住自己的提醒，上进的你，快乐的你，健康的你，善良的你，一定会有一个灿烂的人生。&lt;/p&gt;

&lt;p&gt;减肥和学习是女人的终生事业啊，哈哈哈哈，已经减了两个星期，初见成效，但还没达到想要的效果，还得继续努力；学习吧，定是不能落下的，按照自己的脚步，慢慢来，总会有属于我的小幸运～～&lt;/p&gt;

</description>
        <pubDate>Sat, 23 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2016/07/23/others/</link>
        <guid isPermaLink="true">http://localhost:3000/2016/07/23/others/</guid>
        
        <category>Others</category>
        
        
      </item>
    
      <item>
        <title>web静态资源缓存自动更新</title>
        <description>&lt;p&gt;核心：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在每次发布之前，利用Gulp对所有的静态资源进行预处理，重命名为原文件名 + 文件MD5值 + 文件后缀名的形式。比如register.js重命名为register-87f3f22ee7.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;步骤：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、先用npm下载gulp-clean  gulp-rev  gulp-rev-collector这几个依赖，其次配置好gulpfile.js里面的内容（已配置好），有兴趣可去项目根目录里面查看；
2、如果第一步已经完成，如果你只是修改了www端得css或者ts，依次执行gulp www-clean( 取决于你gulpfile.js里面的配置) 、gulp ，然后在你配置的相关文件里面就会生成对应的rev-manifest.json（路径：public/assets/rev/css/和public/assets/rev/js/），如下图所示
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/cache1.png&quot; alt=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/cache1.png&quot; /&gt;
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/cache2.png&quot; alt=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/cache2.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3、到这里对应css名称就会发生对应的变化
但是js没有，为什么呢？？？？？？ 因为我们项目里面用的是require模块加载，在每个html里面都是require对应的js，而不是普通的&amp;lt;script src=&quot;&quot;&amp;gt;&amp;lt;/script&amp;gt;。
在网上找了一些相关资料，有两种还凑合：
(1)在require.congfig配置里面加上 urlArgs: &quot;bust=&quot; +  (new Date()).getTime()，但这只适合开发环境
(2)在每次发布的时候需要根据rev-manifest在require.congfig对模块进行mapping，将配置文件以内联JS的形式写入到模版页面里面，类似于：
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/cache3.png&quot; alt=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/cache3.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;看起来有点麻烦哈，因为每次修改完js或者pull代码获得更新的js，rev-manifest.json里面对应的js名称后的一串字符会自动变化，但是require.congfig里面需要我们手动去改变，这需要我们细心啊啊啊啊啊！！！！
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 11 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2016/06/11/web-clear-cache/</link>
        <guid isPermaLink="true">http://localhost:3000/2016/06/11/web-clear-cache/</guid>
        
        <category>Others</category>
        
        
      </item>
    
  </channel>
</rss>
