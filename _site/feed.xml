<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daisydan</title>
    <description>前端开发工程师一枚！</description>
    <link>http://localhost:3000/</link>
    <atom:link href="http://localhost:3000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 26 Jun 2017 16:09:49 +0800</pubDate>
    <lastBuildDate>Mon, 26 Jun 2017 16:09:49 +0800</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>vue项目总结</title>
        <description>&lt;p&gt;一、既然是组件化开发，避免不了组件间的通信，以下列出各组件的通信&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、父组件通过props属性传递数据给子组件（注意：HTML 特性是不区分大小写的。所以，当使用的不是字符串模版，camelCased (驼峰式) 命名的 prop 需要转换为相对应的 kebab-case (短横线隔开式) 命名）

2、父子组件的通信（触发事件使用驼峰格式的自定义事件名称，在父组件中就可以使用on-evnet-name的形式来监听。）
子组件:
    &amp;lt;template&amp;gt; &amp;lt;div @click=&quot;up&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/template&amp;gt;
    methods: { up() { this.$emit('resultChange','hehe'); //主动触发resultChange方法，'hehe'为向父组件传递的数据 }}
父组件:
    &amp;lt;div&amp;gt; &amp;lt;child @on-result-change=&quot;mychangHandle&quot; :msg=&quot;msg&quot;&amp;gt;&amp;lt;/child&amp;gt; //监听子组件触发的upup事件,然后调用change方法&amp;lt;/div&amp;gt;methods: { mychangHandle(msg) { this.msg = msg; }}

3、通过eventHub在任意组件间通信，eventHub就是创建一个事件中心（在全局声明，如let Hub = new Vue(); ），相当于中转站，可以用它来传递事件和接收事件.使用一个空的 Vue 实例作为中央事件总线

4、父组件通过$refs访问子组件属性
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;二、用fetch代替ajax&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;由于IE中没有fetch，自然要为IE单独写个方法来兼容IE。于是有了下面：
return new Promise((resolve, reject) =&amp;gt; {
  let requestObj
  if (window.XMLHttpRequest) { // Mozilla, Safari...
    requestObj = new XMLHttpRequest()
  } else if (window.ActiveXObject) { // IE
    try {
      requestObj = new ActiveXObject('Msxml2.XMLHTTP')
    } catch (e) {
      try {
        requestObj = new ActiveXObject('Microsoft.XMLHTTP')
      } catch (e) {
      }
    }
  }

  let sendData = ''
  if (type === 'POST') {
    sendData = JSON.stringify(data)
  }

  if (url !== '') {
    requestObj.open(type, url, true)
    requestObj.setRequestHeader('Content-type', 'application/x-www-form-urlencoded')
    requestObj.onreadystatechange = () =&amp;gt; {
      if (requestObj.readyState === 4) {
        if (requestObj.status === 200) {
          let obj
          if (isIE(9)) {
            obj = requestObj.responseText
          } else {
            obj = requestObj.response
          }
          if (typeof obj !== 'object') {
            obj = JSON.parse(obj)
          }
          resolve(obj)
        } else {
          reject(requestObj)
        }
      }
    }
    requestObj.send(sendData)
  }
})

如果你够细心的话，你会发现我单独处理了IE9的情况。对，我就在这里踩了个坑，IE9 new ActiveXObject没有response，只有responseText
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 26 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2017/06/26/vue%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://localhost:3000/2017/06/26/vue%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</guid>
        
        <category>Vue</category>
        
        
      </item>
    
      <item>
        <title>一场MYSQL引发的血泪史</title>
        <description>&lt;p&gt;忍不住开头想来一句“我靠!!!!!!”；&lt;br /&gt;
额，不要介意哈，下面我们进入正题，嘿嘿~~&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;场景：启动后台的user-service时，启动异常；&lt;/p&gt;

&lt;p&gt;解决过程：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、排查端口号有没有被占用，结果没有被占用，所以排除
2、排查本地mysql是否正常启动，结果能进去，所以排除
3、排查代码原因，其他同事能正常启动，所以又重新到gitlab上clone了一份代码，结果报同样的问题，所以排除
4、关机重启，依旧.....
5、尝试连接同事的数据库，连接成功后启动，结果正常了！！！！！
6、卸载mysql重新安装，之前都是用方便的brew装，装成功后，依旧有问题...继续卸载，然后直接到官网上下了个最新的mysql安装，安装成功后，成功启动！！！！！
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;整个过程花了我足足一天时间，心里当时是一万个草泥马，但是现在回想起来，我也学到了不少知识。有血泪史，才有进步，哈哈哈哈哈&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;首先，熟悉了mysql常用命令及操作；
其次，发现了两个问题：
    第一个是MySQL 5.7更改密码的命令相对以前有所变化，现在是 UPDATE user SET authentication_string=PASSWORD(&quot;NEWPASSWORD&quot;) WHERE User='root';以前的password被authentication_string替代了。
    第二个是出现ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)的解决方案：先停掉mysql，接着在有mysqld_safe的目录下执行sudo ./mysqld_safe --skip-grant-tables，然后进入/usr/local/mysql/bin下执行./mysql就会成功进入。
最后，锻炼我耐心的同时，我也真正学会看相关的错误日志了。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sat, 27 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2017/05/27/%E4%B8%80%E5%9C%BAMYSQL%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%B3%AA%E5%8F%B2/</link>
        <guid isPermaLink="true">http://localhost:3000/2017/05/27/%E4%B8%80%E5%9C%BAMYSQL%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%B3%AA%E5%8F%B2/</guid>
        
        <category>Mysql</category>
        
        
      </item>
    
      <item>
        <title>项目开发中兼容性总结</title>
        <description>&lt;p&gt;时间过得还是蛮快的，已经是入职新公司的第二周了，上篇博客写的时候还在各种面试阶段。&lt;/p&gt;

&lt;p&gt;最近两周一部分时间在做和兼容性相关的工作，对我来说也是一个经验，因为之前在兼容性方面也没专门花时间去仔细做过。下面我总结下最近遇到的一些兼容性方面的问题及答案：&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;q： 鼠标点击a、select、input、button等标签在火狐和IE中会出现虚线框&lt;br /&gt;
a：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**** 清除ie的默认选择框样式清除，隐藏下拉箭头 ****/
select::-ms-expand { display: none; }

/**** 去掉Firefox下select选中时的虚线框 ****/
select:-moz-focusring,a:-moz-focusring {
    border: none!important;
    color: transparent!important;
    text-shadow: 0 0 0 #000!important;
}
a,input,button{ outline:none!important;}

a{blr:expression(this.onFocus=this.close())!important;} /* 只支持IE，过多使用效率低 */

a{blr:expression(this.onFocus=this.blur())!important;} /* 只支持IE，过多使用效率低 */

a:focus { -moz-outline-style: none!important; } /* IE不支持 */

a:focus { outline: none!important; } /*很多网站都会加的属性*/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;q： endswith方法在IE中不兼容，会报错&lt;br /&gt;
a：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;endswith(str)：用来检验一个字符串是否以str结尾；这里我们很容易想到用其他兼容性较好的方法来代替它，这里我用的是substr替代的。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以上只是我最近几天遇到的，以后遇到其他兼容性相关的会继续补充^-^~~&lt;/p&gt;

</description>
        <pubDate>Thu, 20 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2017/04/20/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%AD%E5%85%BC%E5%AE%B9%E6%80%A7%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://localhost:3000/2017/04/20/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%AD%E5%85%BC%E5%AE%B9%E6%80%A7%E6%80%BB%E7%BB%93/</guid>
        
        <category>CSS</category>
        
        
      </item>
    
      <item>
        <title>方格布局</title>
        <description>&lt;p&gt;最近被问到一个很有趣的问题，怎样实现默认方格块依次排列从左到右，从上到下依次排列，鼠标滑过每个方格块时，边框变为红色，如下图所示：
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/2017-4-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当时看到这些方格块，脑海里面首先想到的就是table布局，当时的基本思路是先用table布局(table要设置合并边框模型border-collapse:collapse;)；然后在每个td标签里面使用使用span标签占满整个空间，hover的时候border变色。&lt;/p&gt;

&lt;p&gt;but…它的宽度是不确定的，所以这个想法是行不通的。&lt;/p&gt;

&lt;p&gt;后来通过google找到了一种解决方案，嘿嘿，我觉得这种方案太神奇了~~&lt;/p&gt;

&lt;p&gt;直接上代码部分^-^&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;html部分：
&amp;lt;div class=&quot;main clearfix&quot;&amp;gt;
    &amp;lt;span&amp;gt;
    &amp;lt;div class=&quot;item&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;
    &amp;lt;div class=&quot;item&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;
    &amp;lt;div class=&quot;item&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;
    &amp;lt;div class=&quot;item&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;
    &amp;lt;div class=&quot;item&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;
    &amp;lt;div class=&quot;item&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;
    &amp;lt;div class=&quot;item&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;
    &amp;lt;div class=&quot;item&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;
    &amp;lt;div class=&quot;item&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/span&amp;gt;
 &amp;lt;/div&amp;gt;
 

 css部分：
 .main{
    width: 103px;      //这里宽度不固定，宽度为方块宽度的倍数
    margin: 100px auto;
    background: #000;
    padding-top: 1px;
    }
.item{
    width: 33px;
    height: 33px;
    line-height: 33px;
    background: #eee;
    margin-right: 1px;
    margin-top: 1px; 
    }
span{
    float: left;
    width: 34px;
    height: 34px;
    padding-left: 1px;
    padding-bottom: 1px;
    margin-right: -1px;
    margin-top: -1px;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 02 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2017/04/02/css-%E6%96%B9%E6%A0%BC%E6%8E%92%E5%88%97/</link>
        <guid isPermaLink="true">http://localhost:3000/2017/04/02/css-%E6%96%B9%E6%A0%BC%E6%8E%92%E5%88%97/</guid>
        
        <category>CSS</category>
        
        
      </item>
    
      <item>
        <title>“圣杯”及等高布局的几种方案</title>
        <description>&lt;p&gt;不了解的人可能不知道“圣杯”及等高布局是个啥意思，嘿嘿，其实在昨天之前我也不知道这个名词，但你一定会知道它的内容（其实就是我们常见的三列布局，左右两边固定宽度，中间自适应并且这三列是等高的）。经本人亲证，总结了以下几种，话不多说，直接进入正题：&lt;/p&gt;

&lt;h4 id=&quot;html&quot;&gt;公共html部分：&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &amp;lt;body&amp;gt;
        &amp;lt;div class=&quot;main&quot; id=&quot;main&quot;&amp;gt;
            &amp;lt;div class=&quot;main-left&quot; id=&quot;mainLeft&quot;&amp;gt;&amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;main-center&quot; id=&quot;mainCenter&quot;&amp;gt;
            &amp;lt;p&amp;gt;test&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;test&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;test&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;test&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;test&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;test&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;test&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;test&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;test&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;test&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;main-right&quot; id=&quot;mainCenter&quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;table&quot;&gt;table布局&lt;/h4&gt;

&lt;h6 id=&quot;css&quot;&gt;css部分：&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    .main{
        width: 100%;
        display: table;
    }
    .main-left, .main-center, .main-right{
        display: table-cell;
    }
    .main-left, .main-right{
        background: #000;
        width: 200px;
    }
    .main-center{
        background: #eee;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;section&quot;&gt;结果如下：&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/2017-3-22-icon1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样就实现“圣杯”及等高布局了。不过我们通常还有另外的需求：当我们文档内容高度小于浏览器视口高度时，依然想让它占满整个空间，这样就还需要通过额外的js操作如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(document.body.clientHeight &amp;lt; window.innerHeight){
    document.getElementById('main').style.height = window.innerHeight+'px';
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后就是这样了：
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/2017-3-22-icon2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;section-1&quot;&gt;定位实现&lt;/h4&gt;

&lt;h6 id=&quot;css-1&quot;&gt;css部分：&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.main{
    width: 100%;
    position: relative;
}
.main-left, .main-right{
    position: absolute;
    top: 0;
    width: 200px;
    height: 100%;
    background: #000;
}
.main-left{
    left: 0;
}
.main-right{
     right: 0;
}
.main-center{
    width: calc(100% - 400px);
    margin-left: 200px;
    margin-right: 200px;
    background: #eee;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;同样需要它占满整个空间需要：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(document.body.clientHeight &amp;lt; window.innerHeight){
    document.getElementById('mainCenter').style.height = window.innerHeight+'px';
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;section-2&quot;&gt;结果显示和以上第二张图一样&lt;/h6&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;flex&quot;&gt;flex布局&lt;/h4&gt;

&lt;h6 id=&quot;css-2&quot;&gt;css部分：&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.main{
    width: 100%;
    display: flex;
}
.main-left, .main-right{
    flex: 0 0 200px;
    width: 200px;
    height: 100%;
    background: #000;
}
.main-center{
    flex: 1;
    background: #eee;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;同样需要它占满整个空间需要：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(document.body.clientHeight &amp;lt; window.innerHeight){
    document.getElementById('main').style.height = window.innerHeight+'px';
}else{
    document.getElementById('mainLeft').style.height = document.body.clientHeight+'px';
    document.getElementById('mainRight').style.height = document.body.clientHeight+'px';
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;section-3&quot;&gt;结果显示和以上第二张图一样&lt;/h6&gt;

&lt;hr /&gt;

&lt;p&gt;但是考虑到兼容性和简易问题，table布局最优~~&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2017/03/22/%E5%9C%A3%E6%9D%AF-%E5%8F%8A%E7%AD%89%E9%AB%98%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88/</link>
        <guid isPermaLink="true">http://localhost:3000/2017/03/22/%E5%9C%A3%E6%9D%AF-%E5%8F%8A%E7%AD%89%E9%AB%98%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88/</guid>
        
        <category>CSS</category>
        
        
      </item>
    
      <item>
        <title>Http Headers里必须详细了解的&gt;-&lt;</title>
        <description>&lt;p&gt;Http消息头目前大致分为请求头和响应头，具体详细内容可&lt;a href=&quot;https://itbilu.com/other/relate/EJ3fKUwUx.html&quot;&gt;点击查看&lt;/a&gt;，这里我就详细描述两大点如下：&lt;/p&gt;

&lt;p&gt;一、浏览器缓存相关&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、Cache-Control
    no-cache（并不代表浏览器不缓存，而是在缓存前要向服务器确认资源是否被更改）；
    no-store（绝对禁止缓存）；
    max-age（在max-age这段时间里浏览器就不会再向服务器发送请求了）；
    s-maxage（只用于共享缓存，如CDN缓存，若存在s-maxage，则会覆盖掉max-age和Expires header）；
    public （指定响应会被缓存，并且在多用户间共享）；
    private （响应只作为私有的缓存，不能在用户间共享。如果要求HTTP认证，响应会自动设置为private）
    must-revalidate（指定如果页面是过期的，则去服务器进行获取）。

2、Expires
    缓存过期时间，用来指定资源到期的时间，在响应请求头中告诉浏览器在这个时间前浏览器可以直接从它的缓存取数据，而无需再次请求。

3、Last-modified
    服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式。当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。

4、ETag
    根据实体内容生成一段hash字符串，标识资源的状态，由服务端产生。浏览器会将这串字符串传回服务器，验证资源是否已经修改。它可以解决Last-modified存在的一些问题：精确得到资源的最后修改时间，甚至精确到秒；一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;想进一步理解304&lt;a href=&quot;http://www.cnblogs.com/ziyunfei/archive/2012/11/17/2772729.html&quot;&gt;可点击查看&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;大概流程图如下： &lt;br /&gt;
&lt;img src=&quot;http://www.alloyteam.com/wp-content/uploads/2016/03/%E5%9B%BE%E7%89%8761.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;二、Keep-Alive模式&lt;/p&gt;

&lt;p&gt;我们都知道HTTP协议为无连接的协议，所以每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开。那有什么办法可以避免建立或者重新建立连接呢？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;肯定是有的，那就是使用Keep-Alive模式，即在header里面设置connection:keep-alive。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Keep-Alive模式发送完数据http，服务器不会自动断开连接，那客户端如何判断请求所得到的响应数据已经接收完成（或者说如何知道服务器已经发生完了数据）？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、使用Conent-Length，表示实体内容长度，客户端（服务器）可以根据这个值来判断数据是否接收完成；但是如果是动态页面等时，服务器是不可能预先知道内容大小，这时就要看接下来第二条了；

2、使用Transfer-Encoding，如果一边产生数据，一边发给客户端，服务器就需要使用&quot;Transfer-Encoding: chunked&quot;这样的方式来代替Content-Length。chunk编码将数据分成一块一块的发生。Chunked编码将使用若干个Chunk串连而成，由一个标明长度为0 的chunk标示结束。每个Chunk分为头部和正文两部分，头部内容指定正文的字符总数（十六进制的数字 ）和数量单位（一般不写），正文部分就是指定长度的实际内容，两部分之间用回车换行(CRLF) 隔开。在最后一个长度为0的Chunk中的内容是称为footer的内容，是一些附加的Header信息（通常可以直接忽略
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sat, 18 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2017/03/18/http-headers/</link>
        <guid isPermaLink="true">http://localhost:3000/2017/03/18/http-headers/</guid>
        
        <category>Others</category>
        
        
      </item>
    
      <item>
        <title>Vue实践中的几个折腾点</title>
        <description>&lt;h4 id=&quot;section&quot;&gt;组件间事件派发与接收&lt;/h4&gt;
&lt;p&gt;在用vue实现外卖页面的时候，当点击+的时候小球下落一个，但+和小球分别在不同的组件中。这是就需要在两个组件间进行事件的通信。由于在vue2.0中$dispatch 和 $broadcast被弃用，需要采用新的方式如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在初始化vue之前，给data添加一个 名字为eventhub 的空vue对象
/* eslint-disable no-new */
new Vue({
    el: '#app',
    router,
    polyfill: true,
    template: '&amp;lt;App/&amp;gt;',
    data: {
        eventHub: new Vue()
    },
    components: {App}
});

某一个组件内调用事件触发：this.$root.eventHub.$emit('eventName', event.target);

另一个组件内调用事件接收, 在组件销毁时解除事件绑定,使用$off方法
created:{
    this.$root.eventHub.$on('eventName',(target) =&amp;gt; {
        this.functionName(target)
    });
},
method:{
    functionName(target) {
        console.log(target);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;vue20-&quot;&gt;Vue2.0 小球下落动画实现&lt;/h4&gt;
&lt;p&gt;因为只有enter过程，所以使用vue钩子beforeEnter、enter、afterEnter&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;transition name=&quot;drop&quot; v-for=&quot;ball in balls&quot; key=&quot;ball&quot; @before-enter=&quot;beforeEnter&quot; @enter=&quot;enter&quot; @after-enter=&quot;afterEnter&quot;&amp;gt;
      &amp;lt;div v-show=&quot;ball.show&quot; class=&quot;ball&quot;&amp;gt;
        &amp;lt;div class=&quot;inner inner-hook&quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
 &amp;lt;/transition&amp;gt;

  beforeEnter: function (el) {
    let count = this.balls.length;
    while (count--) {
      let ball = this.balls[count];
      if (ball.show) {
        let rect = ball.el.getBoundingClientRect();
        let x = rect.left - 32;
        let y = -(window.innerHeight - rect.top - 22);
        el.style.display = '';
        el.style.webkitTransform = `translate3D(0,${y}px,0)`;
        el.style.transform = `translate3D(0,${y}px,0)`;
        let inner = el.getElementsByClassName('inner-hook')[0];
        inner.style.webkitTransform = `translate3D(${x}px,0,0)`;
        inner.style.transform = `translate3D(${x}px,0,0)`;
      }
    }
  },
  // 此回调函数是可选项的设置
  // 与 CSS 结合时使用
  enter: function (el, done) {
    /* eslint-disable no-unused-vars */
    let refresh = el.offsetHeight;
    this.$nextTick(() =&amp;gt; {
      el.style.display = '';
      el.style.webkitTransform = 'translate3D(0,0,0)';
      el.style.transform = 'translate3D(0,0,0)';
      let inner = el.getElementsByClassName('inner-hook')[0];
      inner.style.webkitTransform = 'translate3D(0,0,0)';
      inner.style.transform = 'translate3D(0,0,0)';
    });
    done();
  },
  afterEnter: function (el) {
    let ball = this.balls[0];
    ball.show = false;
    el.style.display = 'none';
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;section-1&quot;&gt;让项目在服务器后台执行&lt;/h4&gt;
&lt;p&gt;起初用的是nohub npm run dev &amp;amp;  但是在服务器上，该命令不生效；后来用screen npm run dev就完美解决了。&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2017/03/15/Vue%E6%8A%98%E8%85%BE%E7%82%B9/</link>
        <guid isPermaLink="true">http://localhost:3000/2017/03/15/Vue%E6%8A%98%E8%85%BE%E7%82%B9/</guid>
        
        <category>Vue</category>
        
        
      </item>
    
      <item>
        <title>Fetch API</title>
        <description>&lt;p&gt;自我从事前端，一直使用XMLHttpRequest(XHR)发送异步请求；直到最近了解到Fetch API，发现它完美基于事件的模型与最近流行的 Promise 和 generator 异步编程模型，然后果断替换掉ajax换这个实用的方法来获取网络资源。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;简单示例&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Fetch API中最常用的是fetch()方法，该方法最简单的形式是，接受一个URL参数并返回以一个promise对象
fetch(&quot;/data.json&quot;).then(function(res) {
    // res instanceof Response == true.
    if (res.ok) {
        res.json().then(function(data) {
        console.log(data.entries);
        });
    } else {
        console.log(&quot;Looks like the response wasn't perfect, got status&quot;, res.status);
    }
    }, function(e) {
    console.log(&quot;Fetch failed!&quot;, e);
});

如果是提交一个POST请求，代码如下：
fetch(&quot;http://www.example.org/submit.php&quot;, {
    method: &quot;POST&quot;,
    headers: {
        &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;
    },
    body: &quot;firstName=Nikhil&amp;amp;favColor=blue&amp;amp;password=easytoguess&quot;
    }).then(function(res) {
    if (res.ok) {
        alert(&quot;Perfect! Your settings are saved.&quot;);
    } else if (res.status == 401) {
        alert(&quot;Oops! You are not authorized.&quot;);
    }
    }, function(e) {
    alert(&quot;Error submitting form!&quot;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;fetch3&quot;&gt;Fetch引入的3个接口&lt;/h4&gt;
&lt;p&gt;1、Headers 它可以是键值对，也可以是一个多维数组或JS字面量对象；可以通过has来检索它是否有那个内容。&lt;/p&gt;

&lt;p&gt;2、Request 通过构造一个 Request 对象来获取网络资源，构造函数需要 URL、method 和 headers 参数，同时也可以提供请求体（body）、请求模式（mode）、credentials 和 cache hints 等参数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var uploadReq = new Request(&quot;/uploadImage&quot;, {
    method: &quot;POST&quot;,
    headers: {
        &quot;Content-Type&quot;: &quot;image/png&quot;,
    },
    body: &quot;image data&quot;
});
mode 参数用来决定是否允许跨域请求，以及哪些 response 属性可读。可选的 mode 值为 &quot;same-origin&quot;（所有的请求遵守同源策略）、&quot;no-cors&quot;（默认，该模式允许来自 CDN 的脚本、其他域的图片和其他一些跨域资源，但是首先有个前提条件，就是请求的 method 只能是HEAD、GET 或 POST。此外，如果 ServiceWorkers 拦截了这些请求，它不能随意添加或者修改除这些之外 Header 属性。第三，JS 不能访问 Response 对象中的任何属性，这确保了跨域时 ServiceWorkers 的安全和隐私信息泄漏问题）以及 &quot;cors&quot;（用于跨域请求）。另外，credentials 属性决定了是否可以跨域访问 cookie 。该属性与 XHR 的withCredentials 标志相同，但是只有三个值，分别是 omit（默认）、same-origin 和 include。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3、Response  fetch() 的回调中获得，有一个 type 属性，它的值可能是 “basic”、”cors”、”default”、”error” 或 “opaque”。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;流和克隆&lt;/h4&gt;
&lt;p&gt;1、注意Request和Response的body只能被读取一次！它们有一个属性叫bodyUsed，读取一次之后设置为true，就不能再读取了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var res = new Response(&quot;one time use&quot;);
    console.log(res.bodyUsed); // false
    res.text().then(function(v) {
    console.log(res.bodyUsed); // true
    });
    console.log(res.bodyUsed); // true

    res.text().catch(function(e) {
    console.log(&quot;Tried to read already consumed Response&quot;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2、API提供了一个clone()方法。调用这个方法可以得到一个克隆对象。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;addEventListener('fetch', function(evt) {
    var sheep = new Response(&quot;Dolly&quot;);
    console.log(sheep.bodyUsed); // false
    var clone = sheep.clone();
    console.log(clone.bodyUsed); // false

    clone.text();
    console.log(sheep.bodyUsed); // false
    console.log(clone.bodyUsed); // true

    evt.respondWith(cache.add(sheep.clone()).then(function(e) {
        return sheep;
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不过要记得，clone()必须要在读取之前调用，也就是先clone()再读取。&lt;/p&gt;

&lt;h4 id=&quot;vue--vue-fetch&quot;&gt;vue + vue-fetch&lt;/h4&gt;
&lt;p&gt;学习了fetch，立马拿到最近做demo中去应用。
首先，npm install vue-fetch，然后相关代码如下：
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/fetch-1.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/fetch-2.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/fetch-3.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://7xnl4q.com1.z0.glb.clouddn.com/fetch-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2017/03/06/Fetch-API/</link>
        <guid isPermaLink="true">http://localhost:3000/2017/03/06/Fetch-API/</guid>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>JS常用排序算法总结</title>
        <description>&lt;p&gt;1、插入排序&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;思想：构建有序数列，对于未排序的数据，在已排序的数据中从后向前找到合适的位置插入直到未排序的数据个数为0（时间复杂度为n^2）；（注意：在已排序的中找到合适的位置可以采用二分查找提高效率，这样最后的时间复杂度为n^2）。

代码：
    function insertSort(array){
        var i,j,temp,low,mid,high,result,len = array.length;
        if(len &amp;lt;= 1) return array;
        result = array.slice(0);
        for(i = 1;i &amp;lt; len;i++){
            temp = result[i];
            low = 0;
            high = i - 1;
            while(low &amp;lt;= high){
                mid = parseInt((low+high)/2, 10);
                if(temp &amp;lt; result[mid]) high = mid - 1;
                else low = mid + 1;
            }
            for(j = i - 1;j &amp;gt;= high + 1;j--){
                result[j+1] = result[j];
            }
            result[j+1] = temp;
        }
        return result;
    }
    insertSort([1,3,55,4,77]);  //[1, 3, 4, 55, 77]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2、冒泡排序&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;思想：相邻两元素进行比较，若前一个元素大于后一个元素，则交换顺序，这一轮会找出最大或者最小的元素；然后在剩下的元素重复上述操作直至所有元素都已排序完成,时间复杂度为n^2。（优化思路：当一次遍历前后数组不产生变化时，说明该数组已经有序，结束排序）

代码：
    function bubbleSort(array){
        var len = array.length,i,j,temp,exchange,result;
        result = array.slice(0);
        for(i = 0; i &amp;lt; len; i++){
            exchange = 0;
            for(j = len - 1;j &amp;gt; i; j--){
                if(result[j] &amp;lt; result[j-1]){
                    temp = result[j];
                    result[j] = result[j-1];
                    result[j-1] = temp;
                    exchange = 1;
                }
            }
        if (!exchange) return result;
        }
        return result;
    }
    bubbleSort([44,1,3,6,2,55]); //[1, 2, 3, 6, 44, 55]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2、快速排序&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;思想：首先选择一个元素（一般为中间元素）作为基准，然后比这个元素大的全部放在右边，比它小的全部放在左边；然后，在左边和右边分别重复上诉操作（时间复杂度为nlogn）。

代码：
    function quickSort(array){
        sort = function(array){
            var len = array.length;
            if(len &amp;lt;= 1) return array;
            var pivotIndex = Math.floor(array.length / 2);
            var pivot = array.splice(pivotIndex, 1)[0];
            var left = [], right = [];
            for(var i = 0; i &amp;lt; len; i++){
                if(array[i] &amp;lt; pivot){
                    left.push(array[i]);
                }else{
                    right.push(array[i]);
                }
            }
            return sort(left).concat([pivot], sort(right));
        }
        var result = sort(array);
        return result;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 05 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2017/03/05/JavaScript-Algorithms/</link>
        <guid isPermaLink="true">http://localhost:3000/2017/03/05/JavaScript-Algorithms/</guid>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>面试不会问题总结</title>
        <description>&lt;h4 id=&quot;section&quot;&gt;1、提供一种方法同时检测基本类型与引用类型&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;functipn toType(value){
    return ({}).toString.call(value).match(/\s[a-zA-Z]/)[1].toLowerCase();
}

toType('1111')     //&quot;string&quot;
toType(['1','2'])  //&quot;array&quot;
toType(new Date);  //&quot;date&quot;
toType(function foo() {console.log(&quot;Test&quot;)}); // &quot;function&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-1&quot;&gt;2、垃圾回收机制&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;两种策略来实现垃圾回收：标记清除 和 引用计数
*标记清除：运行时给所有变量添加上标记，结束时去掉；此后，如果变量再被标记则表示此变量准备被删除
*引用计数：跟踪记录每个值被引用的次数，当声明一个变量并将一个引用类型的值赋给该变量时，这个值的引用次数就是1，如果这个值再被赋值给另一个变量，则引用次数加1。相反，如果一个变量脱离了该值的引用，则该值引用次数减1，当次数为0时，就会等待垃圾收集器的回收。这个方式存在一个比较大的问题就是循环引用，就是说A对象包含一个指向B的指针，对象B也包含一个指向A的引用。 这就可能造成大量内存得不到回收（内存泄露），因为它们的引用次数永远不可能是 0 。
举个例子

        //这段代码为什么会造成内存泄露？
        window.onload = function(){
            var el = document.getElementById(&quot;id&quot;);
            // 执行这段代码的时候，将匿名函数对象赋值给el的onclick属性；然后匿名函数内部又引用了el对象，存在循环引用，所以不能被回收；
            el.onclick = function(){
                alert(el.id);
            }
        }

        //解决方法：
        window.onload = function(){
            var el = document.getElementById(&quot;id&quot;);
            var id = el.id; //解除循环引用
            el.onclick = function(){
                alert(id);
            }
            el = null; // 将闭包引用的外部函数中活动对象清除
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;bindapplycall&quot;&gt;3、bind与apply、call的比较&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//改变this指向func
func.call (this ,  arg1,  arg2 );
func.apply (this ,  [arg1 ,  arg2])

//也是可以改变函数体内 this 的指向
var  foo  = {
        bar :  1,
        eventBind:  function(){
            $('.someClass' ).on ('click' ,function (event )  {
            /* Act on the event */
            console. log( this. bar);  //1
            }.bind (this ));
        }
    }

*apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；
*apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；
*apply 、 call 、bind 三者都可以利用后续参数传参；
*bind是返回对应函数，便于稍后调用(回调执行的时候)；apply、call则是立即调用 。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;hashrouter&quot;&gt;4、hash、router&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//hash
location.hash则可以用来获取或设置页面的标签值。比如http://domain/#admin的location.hash=”#admin”

//router
*hash形式，当url的hash发生改变时，触发hashchange注册的回调，回调中去进行不同的操作，进行不同的内容的展示。
     &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;router&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;turn white&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#/blue&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;turn blue&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#/green&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;turn green&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'load'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hashchange'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// change Page anything&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changeBgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;changeBgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'white'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;changeBgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;changeBgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

 *History API来处理。
 链接：https://www.renfei.org/profile/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;spa&quot;&gt;5、SPA&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://web.jobbole.com/86558/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 04 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:3000/2017/03/04/%E9%9D%A2%E8%AF%95%E4%B8%AD%E4%B8%8D%E4%BC%9A%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">http://localhost:3000/2017/03/04/%E9%9D%A2%E8%AF%95%E4%B8%AD%E4%B8%8D%E4%BC%9A%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        
        <category>Others</category>
        
        
      </item>
    
  </channel>
</rss>
